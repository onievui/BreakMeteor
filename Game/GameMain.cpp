//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/
//! @file   GameMain.cpp
//!
//! @brief  ゲーム関連のソースファイル
//!
//! @date   日付
//!
//! @author 制作者名
//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/

// ヘッダファイルの読み込み ================================================
#include "GameMain.h"
#include "PlayScene.h"
#include "Pad.h"



// <Gameクラス> ****************************************************************


// メンバ関数の定義 ========================================================
//------------------------------------------------------------------
//! @brief デフォルトコンストラクタ
//!
//! @param[in] なし
//------------------------------------------------------------------
Game::Game() {

}



//------------------------------------------------------------------
//! @brief デストラクタ
//------------------------------------------------------------------
Game::~Game() {

}



//----------------------------------------------------------------------
//! @brief ゲームの初期化処理
//!
//! @param[in] なし
//!
//! @return なし
//----------------------------------------------------------------------
void Game::Initialize(void) {
	nowScene = std::make_unique<PlayScene>(this);
	nextScene = SCENE_NONE;
}



//----------------------------------------------------------------------
//! @brief ゲームの更新処理
//!
//! @param[in] なし
//!
//! @return なし
//----------------------------------------------------------------------
void Game::Update(void) {
	Pad::getIns()->update();
	if (nextScene != SCENE_NONE) {
		changeScene();
	}
	nowScene->update();
}



//----------------------------------------------------------------------
//! @brief ゲームの描画処理
//!
//! @param[in] なし
//!
//! @return なし
//----------------------------------------------------------------------
void Game::Render(void) {
	nowScene->render();
}



//----------------------------------------------------------------------
//! @brief ゲームの終了処理
//!
//! @param[in] なし
//!
//! @return なし
//----------------------------------------------------------------------
void Game::Finalize(void) {

}

//----------------------------------------------------------------------
//! @brief シーンの切り替え要求
//!
//! @param[in] _id 要求するシーンID
//!
//! @return なし
//----------------------------------------------------------------------
void Game::requestScene(const SceneID _id) {
	if (_id <= SCENE_NONE || _id >= SCENE_NUM) {
		MessageBox(NULL, "シーンの切り替え要求で不正な値が渡されました", "", MB_OK);
		return;
	}
	nextScene = _id;
}

//----------------------------------------------------------------------
//! @brief シーンの切り替え処理
//!
//! @param[in] _id 次のシーンID
//!
//! @return なし
//----------------------------------------------------------------------
void Game::changeScene(void) {
	nowScene->finalize();
	switch (nextScene) {
	case SCENE_PLAY:
		nowScene = std::make_unique<PlayScene>(this);
		break;
	default:
		MessageBox(NULL, "シーンの切り替え処理で不正な値が渡されました", "", MB_OK);
		return;
		break;
	}
	nextScene = SCENE_NONE;
}
